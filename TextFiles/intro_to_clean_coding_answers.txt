{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11580\viewh12220\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Exercises\
\
1. Clean code is easy to read, does not contain repetitive code, has correct syntax and indentation and doesn\'92t use inline styling. This is important because you are most likely not going to be the only person who works on this code. Others should easily be able to read, change, and understand your code without a lot of digging. Clean code allows the app/site/program to be updated easily instead of rewritten saving a lot of time and energy. Having a clean code can also reduce errors or extraneous time to complete actions/loading. \
\
2. Many things are becoming \'93smart\'94 in this day and age. If your smart refrigerator was relaying on code that was clunky or incorrect you could end up with a fridge full of bad good from overheating or undercooling. Washing machines could cycle forever, medical equipment could malfunction and fail to work causing a myriad of problems. As more things become \'91smart\'92 it\'92s important to make sure they are being done correctly and not causing menacing or even deadly results for users. \
\
\
3. No. There are too many comments and variables are not named correctly causing confusion and making the comments necessary. \
\
Function do( c, f)\
	IF \
		SET temp to (c-32) * (5/9) degrees fahrenheit to celsius\
	\
		PRINT temp\
	\
	ELSE IF f\
		SET temp to f * 1.8000 + 32.00 degrees celsius to fahrenheit\
		\
		PRINT temp\
\
	END IF\
End Function\
\
\
4. Yes\
\
5. \
\
A. No, could pull out functions for reuse - DRY. \
\
FUNCTION getTotal(discountRate, subTotal, tax, total)\
	total = subTotal * discountRate + (subTotal * tax)\
	PRINT \'93Your total due is: \'93 + total\
\
FUNCTION getPayment(total, paymentType)\
	IF paymentType = \'93Cash\'94 THEN\
		CALL getPayment RETURNING amount\
		PRINT \'93Change due: \'93 + amount - total\
	ELSE IF paymentType = \'93CREDIT CARD\'94 THEN\
		CALL getPayment RETURNING amount\
		PRINT \'93Your credit card has been charge: \'93 + total\
	\
	END IF\
END FUNCTION \
\
B. No, can combine IF statements.\
FUNCTION checkoutBook(book, guest)\
	IF guest.accountActive && !(guest.hasOverdueBooks) && guest.outstandingFees = 0 THEN\
		APPEND book to guest.books\
		SET book.status to \'93Checked Out\'94\
		PRINT \'93Your books have been issued.\'94\
	END IF\
	\
	ELSE\
		PRINT \'93Unable to check out book.\'94\
	END IF\
END FUNCTION\
\
C. No, could combine functions.\
\
CLASS BankAccount\
	FUNCTION displayBalance\
		PRINT balance\
	END FUNCTION\
\
	FUNCTION accountChange(amount, deposit, withdraw)\
		IF deposit THEN\
			SET glance to balance + amount\
		ELSE IF withdraw THEN\
			SET balance to balance - amount\
		END\
	END FUNCTION\
\
	FUNCTION bankOffers(hasCreditCard, hasCheckingAccount)\
		IF NOT (customer.hasCreditCard THEN\
			CALL offerCreditCard\
		ELSE IF NOT (customer.hasBankAccount THEN\
			CALL offerBankAccount\
		END\
	END FUNCTION\
END\
\
\
Programming Questions\
\
6. \
var arrayOne = [10, 1, 4, 5, 1, 2, 2];\
var arrayTwo = [1, 1];\
var arrayThree = [1, 6, 8, 5, 7, 2, 1, 5, 12, 2];\
\
function getSum(total, num) \{\
  return total + num;\
\}\
\
var squareSum = arrayOne.reduce(getSum);\
\
function getSquareRoot(squareSum) \{\
  if (Number.isInteger(Math.sqrt(squareSum))) \{\
    return Math.sqrt(squareSum);\
  \} else \{\
    return squareSum;\
  \}\
\}\
\
getSquareRoot(squareSum);\
\
\
7. \
function findDuplicate(array) \{\
  for(var i = 0; i < array.length; i++) \{\
    for( var n = i + 1; n < array.length; n++)\{ \
      if(array[i] === array[n]) \{\
        return true;\
      \} else \{\
        return false;\
      \}\
    \}\
  \}\
\}\
\
\
\
	\
	\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}